# MessageResources.properties
#
# Project: SNDlib
#
# This file lists all error messages which may be produced by the parsers,
# validators etc. of SNDlib.
#

###############################################
# general native parser error messages
###############################################

parser.text.header.error.notFound = line {0}: header expected (contains version and file type)
parser.text.header.error.invalidType = invalid file type in header; expected "{0}"; was "{1}" 
parser.text.header.error.unsupportedVersion = unsupported native format version: "{0}"

parser.text.general.error.endOfSectionExpected = line {0}: end of section expected
parser.text.general.error.invalidLine = line {0}: invalid line: "{1}"
parser.text.general.error.sectionNotFound = section "{0}" not found

###############################################
# network native parser error messages
###############################################

parser.text.network.error.demandNotFound = line {0}: demand "{1}" not found
parser.text.network.error.linkNotFound = line {0}: link "{1}" in path "{2}" of demand "{3}" not found
parser.text.network.error.nodeNotFound = line {0}: source/target node "{1}" of link/demand "{2}" not found

parser.text.network.error.duplicateNodeId = line {0}: duplicate node: "{1}"
parser.text.network.error.duplicateLinkId = line {0}: duplicate link: "{1}"
parser.text.network.error.duplicateDemandId = line {0}: duplicate demand: "{1}"
parser.text.network.error.duplicatePathId = line {0}: duplicate path for demand "{2}": "{1}"
parser.text.network.error.duplicateModuleCapacity = line {0}: duplicate module capacity for link "{2}": "{1}" 

###############################################
# solution native parser error messages
###############################################

parser.text.solution.error.duplicateLinkConf = line {0}: duplicate configuration for link: "{1}"
parser.text.solution.error.duplicateModuleConf = line {0}: duplicate installed module capacity "{1}" in configuration for link "{2}"
parser.text.solution.error.duplicateRouting = line {0}: duplicate routing specification for demand "{1}" in state "{2}" 

parser.text.solution.error.linkIdInRoutingPathNotFound = line {0}: configuration of link "{1}" in routing for demand "{2}" in state "{3}" not found
parser.text.solution.error.noFlowPathInRouting = line {0}: there is no valid flow path in routing for demand "{1}" in state "{2}"

##############################################
# model native parser error messages
##############################################

parser.text.model.error.invalidModelProperty = line {0}: invalid network model property "{1}"
parser.text.model.error.invalidPropertyValue = line {0}: invalid value {1} for property "{2}"
parser.text.model.error.duplicateModelProperty = line {0}: duplicate model property "{1}"; ignore this definition
parser.text.model.error.modelPropertyNotFound = definition of model property "{0}" not found in model file

###############################################
# network xml parser error messages
###############################################

parser.xml.network.error.linkNotFound = link "{0}" in path "{1}" of demand "{2}" not found
parser.xml.network.error.nodeNotFound = source/target node "{0}" of link/demand "{1}" not found

parser.xml.network.error.invalidGeographicalLongitude = geographical longitude of node "{0}" must be in range (-180, 180]; is "{1}" 
parser.xml.network.error.invalidGeographicalLatitude = geographical latitude of node "{0}" must be in range [-90, 90]; is "{1}"

parser.xml.network.error.duplicateNodeId = duplicate node: "{0}" 
parser.xml.network.error.duplicateLinkId = duplicate link: "{0}" 
parser.xml.network.error.duplicateDemandId = duplicate demand: "{0}" 
parser.xml.network.error.duplicatePathId = duplicate path for demand "{1}": "{0}" 
parser.xml.network.error.duplicateModuleCapacity = duplicate module capacity for link "{1}": "{0}" 

###############################################
# solution xml parser error messages
###############################################

parser.xml.solution.error.duplicateLinkConf = duplicate configuration for link: "{0}"
parser.xml.solution.error.duplicateModuleConf = duplicate installed module capacity "{0}" in configuration for link "{1}" 
parser.xml.solution.error.duplicateRouting = duplicate routing specification for demand: "{0}" 

parser.xml.solution.error.linkIdInRoutingPathNotFound = configuration of link "{0}" in routing for demand "{1}" not found
parser.xml.solution.error.noFlowPathInRouting = there is no valid flow path in routing for demand "{0}"

###############################################
# network problem validator error messages
###############################################

validator.problem.error.noDirectedPathBetweenSourceTarget = admissible path "{0}" for demand "{1}" is not a directed path between "{2}" and "{3}"
validator.problem.error.noUndirectedPathBetweenSourceTarget = admissible path "{0}" for demand "{1}" is not a undirected path between "{2}" and "{3}"
validator.problem.error.invalidDirectedPath = admissible path "{0}" for demand "{1}" is not a directed path from "{2}" to "{3}"
validator.problem.error.invalidUndirectedPath = admissible path "{0}" for demand "{1}" is not an undirected path from "{2}" to "{3}"
validator.problem.error.emptyPath = admissible path "{0}" for demand "{1}" is empty

validator.problem.error.noExplicitPathsForDemand = no explicit path list specified for demand "{0}"
validator.problem.error.invalidDemandValue = demand value "{0}" for demand "{1}" is not appropriate for routing model "{2}"

validator.problem.error.invalidModelPropertyCombination = invalid combination of model properties ({0}, {1}) = ({2}, {3})
validator.problem.error.modelNotYetSupported = "{0} = {1}" is not yet supported


###################################################
# Solution validator error messages
###################################################

validator.solution.error.linkNotFound = link "{0}" not found in network
validator.solution.error.moduleForLinkNotFound = module with capacity "{0}" not found on link with id "{1}" in network
validator.solution.error.demandNotFound = demand "{0}" not found in network
validator.solution.error.linkInRoutingNotFound = link "{0}" specified in routing for demand "{1}" in state "{2}" not found in network

validator.solution.error.directedLinkCapacityExceeded = flow "{0}" on directed link "{1}" in state "{2}" exceeds installed capacity "{3}"
validator.solution.error.undirectedLinkCapacityExceeded = flow "{0}" on undirected link "{1}" in state "{2}" exceeds installed capacity "{3}"
validator.solution.error.bidirectedPosLinkCapacityExceeded = positive flow "{0}" on bidirected link "{1}" in state "{2}" exceeds installed capacity "{3}"
validator.solution.error.bidirectedNegLinkCapacityExceeded = negative flow "{0}" on bidirected link "{1}" in state "{2}" exceeds installed capacity "{3}"

validator.solution.error.flowNotSatisfyDemandValue = flow {0} for demand "{1}" in state "{2}" does not satisfy the demand value "{3}"

validator.solution.error.routingFlowValueLowerThanZero = flow value "{0}" of path "{1}" in routing for demand "{2}" in state "{3}" is lower than zero
validator.solution.error.moreThanOneRoutingPath = number of paths ({0}) in routing for demand "{1}" in state "{2}" violates the single path property
validator.solution.error.routingFlowValueNotAnInteger = flow value "{0}" of path "{1}" in routing for demand "{2}" in state "{3}" must be an integer (see routing model)

validator.solution.error.routingPathViolatesMaxPathLength = path "{0}" ({1} elements) in routing for demand "{2}" in state "{3}" violates the max path length, which is "{4}" 
validator.solution.error.routingPathNotAdmissible = path "{0}" in routing for demand "{1}" in state "{2}" is not admissible
validator.solution.error.invalidRoutingPath = path "{0}" in routing for demand "{1}" in state "{2}" is not a valid source-target path

validator.solution.error.noPreinstalledCapacityModule = configuration of link "{0}" does not include the capacity pre-installed on that link 
validator.solution.error.noLinkConfForLinkWithPreInstalledCapacity = no configuration found for link "{0}", even though that link possesses a pre-installed capacity 
validator.solution.error.moduleCountLowerThanZero = install count ({0}) of module with capacity "{1}" is lower than zero in configuration of link "{2}"
validator.solution.error.moduleCountNotAnInteger = install count ({0}) of module with capacity "{1}" in configuration of link "{2}" only can be an integer for modular link capacities
validator.solution.error.moduleCountNotEqualToOne = install count ({0}) of module with capacity "{1}" in configuration of link "{2}" only can be 1 for explicit link capacities
validator.solution.error.moreThanOneAdditionalModule = more than one additional modules specified in configuration of link "{1}" (see link capacity model)

validator.solution.error.noRoutingInFailureState = there is no routing for demand "{0}" in state failure state "{1}"
validator.solution.error.protectionRoutingContainsFailureLink = protection routing "{0}" of demand "{1}" in failure state "{2}" contains failure link
validator.solution.error.moreThanOneProtectionPath = more than one protection path (1+1 protection) for demand "{0}": "{1}" and "{2}"
validator.solution.error.illegalFlowRerouting = illegal rerouting of flow (shared-path-protection) on path "{0}" for demand "{1}" in failure state "{2}"

